{"ast":null,"code":"import _slicedToArray from \"/Users/navigate_17/Desktop/fullinfot/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/navigate_17/Desktop/fullinfot/src/components/AlbumsContainer.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchAlbums, fetchPhotos } from \"../actions\";\nimport { Albums } from \"./Albums\";\nimport { Button } from \"./Button\"; // the type of your action creators has been intentionally set to \"any\", as typescript does not play well with redux-thunk\n\nexport const _AlbumsContainer = ({\n  albums,\n  photos,\n  fetchAlbums,\n  fetchPhotos\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        fetching = _useState2[0],\n        setFetching = _useState2[1]; // setting the state back to false once our data updates\n\n\n  useEffect(() => {\n    setFetching(false);\n  }, [albums, photos]); // click evnet handler\n\n  const ClickHandler = () => {\n    fetchAlbums();\n    setFetching(true);\n  }; // album entry event handler\n\n\n  const AlbumClickHandler = id => {\n    fetchPhotos(id);\n  }; // in an application with larger logic and in the case of more expensive clickHandler function,\n  // useCallback would be a perfect approach for optimization\n\n\n  return React.createElement(React.Fragment, null, React.createElement(Button, {\n    fetching: fetching,\n    clickHandler: ClickHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(Albums, {\n    albumsData: albums,\n    clickHandler: AlbumClickHandler,\n    photos: photos,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = ({\n  albums,\n  photos\n}) => {\n  return {\n    albums,\n    photos\n  };\n};\n\nexport const AlbumsContainer = connect(mapStateToProps, {\n  fetchAlbums,\n  fetchPhotos\n})(_AlbumsContainer);","map":{"version":3,"sources":["/Users/navigate_17/Desktop/fullinfot/src/components/AlbumsContainer.tsx"],"names":["React","useEffect","useState","connect","fetchAlbums","fetchPhotos","Albums","Button","_AlbumsContainer","albums","photos","fetching","setFetching","ClickHandler","AlbumClickHandler","id","mapStateToProps","AlbumsContainer"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAuBC,WAAvB,EAAoCC,WAApC,QAAuD,YAAvD;AAEA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,MAAT,QAAuB,UAAvB,C,CAEA;;AAQA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAC/BC,EAAAA,MAD+B;AAE/BC,EAAAA,MAF+B;AAG/BN,EAAAA,WAH+B;AAI/BC,EAAAA;AAJ+B,CAAD,KAKhB;AAAA,oBACkBH,QAAQ,CAAC,KAAD,CAD1B;AAAA;AAAA,QACPS,QADO;AAAA,QACGC,WADH,kBAGd;;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAFQ,EAEN,CAACH,MAAD,EAASC,MAAT,CAFM,CAAT,CAJc,CAQd;;AACA,QAAMG,YAAY,GAAG,MAAY;AAC/BT,IAAAA,WAAW;AACXQ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAHD,CATc,CAcd;;;AACA,QAAME,iBAAiB,GAAIC,EAAD,IAAsB;AAC9CV,IAAAA,WAAW,CAACU,EAAD,CAAX;AACD,GAFD,CAfc,CAmBd;AACA;;;AACA,SACE,0CACE,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAEJ,QAAlB;AAA4B,IAAA,YAAY,EAAEE,YAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,MAAD;AACE,IAAA,UAAU,EAAEJ,MADd;AAEE,IAAA,YAAY,EAAEK,iBAFhB;AAGE,IAAA,MAAM,EAAEJ,MAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAUD,CApCM;;AAsCP,MAAMM,eAAe,GAAG,CAAC;AACvBP,EAAAA,MADuB;AAEvBC,EAAAA;AAFuB,CAAD,KAGgC;AACtD,SAAO;AAAED,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAP;AACD,CALD;;AAOA,OAAO,MAAMO,eAAe,GAAGd,OAAO,CAACa,eAAD,EAAkB;AACtDZ,EAAAA,WADsD;AAEtDC,EAAAA;AAFsD,CAAlB,CAAP,CAG5BG,gBAH4B,CAAxB","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Album, Photo, fetchAlbums, fetchPhotos } from \"../actions\";\nimport { StoreState } from \"../reducers\";\nimport { Albums } from \"./Albums\";\nimport { Button } from \"./Button\";\n\n// the type of your action creators has been intentionally set to \"any\", as typescript does not play well with redux-thunk\ninterface AppProps {\n  albums: Album[];\n  photos: Photo[];\n  fetchAlbums(): any;\n  fetchPhotos(id: number): any;\n}\n\nexport const _AlbumsContainer = ({\n  albums,\n  photos,\n  fetchAlbums,\n  fetchPhotos\n}: AppProps) => {\n  const [fetching, setFetching] = useState(false);\n\n  // setting the state back to false once our data updates\n  useEffect(() => {\n    setFetching(false);\n  }, [albums, photos]);\n\n  // click evnet handler\n  const ClickHandler = (): void => {\n    fetchAlbums();\n    setFetching(true);\n  };\n\n  // album entry event handler\n  const AlbumClickHandler = (id: number): void => {\n    fetchPhotos(id);\n  };\n\n  // in an application with larger logic and in the case of more expensive clickHandler function,\n  // useCallback would be a perfect approach for optimization\n  return (\n    <>\n      <Button fetching={fetching} clickHandler={ClickHandler}></Button>\n      <Albums\n        albumsData={albums}\n        clickHandler={AlbumClickHandler}\n        photos={photos}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = ({\n  albums,\n  photos\n}: StoreState): { albums: Album[]; photos: Photo[] } => {\n  return { albums, photos };\n};\n\nexport const AlbumsContainer = connect(mapStateToProps, {\n  fetchAlbums,\n  fetchPhotos\n})(_AlbumsContainer);\n"]},"metadata":{},"sourceType":"module"}